/*************************************************************************************************//* Copyright 2005 Shane D. Looker.                                                               *//*                                                                                               *//* This source code is being made available as free sample code as is. No warantee, express or   *//* implied is made as to the quality or correctness of this code.                                *//* This source code may be freely distributed as long as this copyright notice remains attached. *//* Check http://www.MacCommando.com for updated source.                                          *//*************************************************************************************************/#import "CmdoTextField.h"@implementation CmdoTextField- (id) initWithArray: (NSMutableArray*) controlInfo{	self = [super init];	NSControl	*subView = [[NSControl alloc] initWithFrame: NSMakeRect(0, 0, gMaxColumnWidth, 24)];		mControlInfo = controlInfo;	// Text fields have two parts. A visible label and the edit box. So create the 	// label field first. I don't need to retain a link to it though.	NSTextView	*theLabel = [[NSTextView alloc] initWithFrame: NSMakeRect(0, 0, gMaxColumnWidth, 17)];		NSString	*workStrCopy = [controlInfo objectAtIndex: kCmdoControlLabel];	NSSize	theSize = [workStrCopy sizeWithAttributes: [theLabel typingAttributes]];		[theLabel insertText: [controlInfo objectAtIndex: kCmdoControlLabel]];	[theLabel setEditable: FALSE];	[theLabel setSelectable: FALSE];	[theLabel setDrawsBackground: NO];//	[theLabel setBackgroundColor: [NSColor secondarySelectedControlColor]];		NSRect	labelRect = [theLabel frame];	[theLabel setFrame: NSMakeRect(0, 0, theSize.width + 12, 22)];	labelRect = [theLabel frame];		// Now set up the text field for actual text entry. Note that we don't want	// sizeToFit performed here because that would make a very small text field	NSTextField* aField = [[NSTextField alloc] initWithFrame: NSMakeRect(NSWidth(labelRect), 													0, gMaxColumnWidth - NSWidth(labelRect), 22)];		int	theTag = [self nextTag];	[aField setTag: theTag];	[aField setTitleWithMnemonic: [controlInfo objectAtIndex: kCmdoFlagLiteralSubs]]; // Changed from kCmdoControlLabel for Text fields	mRect = [aField frame];	[aField setToolTip: [controlInfo objectAtIndex: kCmdoControlToolTipText]];	[aField setTarget: self];	[controlInfo replaceObjectAtIndex: 0 withObject: aField];	// Save off the reference to the button	[subView addSubview: theLabel];	[subView addSubview: aField];	[[NSNotificationCenter defaultCenter] addObserver: self selector: @selector(TextFieldHandler:) 									name: NSControlTextDidChangeNotification object: aField];	mControl = subView;	[gAllOptionControls setObject: controlInfo forKey: [NSNumber numberWithInt: [aField tag]]];		// Now I have one final task to do. I want to invoke the TextDidChangeNotification so that the	// substitution field is processed into the substitution list for the first time the execution	// line is built. I can either call the function directly (which means I need to build the notification	// manually, or just call the NSNotification object	[[NSNotificationCenter defaultCenter] postNotificationName: NSControlTextDidChangeNotification object: aField];		return self;}// This method handles a click in the TextField and sets the entry in the substitution// dictionary to either a null string (TextField off) or to the substituion value from the// data array.- (void) TextFieldHandler: (NSNotification *)notification{	NSTextField*	theSender = [notification object];//sender;		NSString	*matchStr;	NSString	*subsStr;	NSMutableArray	*dataArray = [gAllOptionControls objectForKey: [NSNumber numberWithInt:[theSender tag]]];		if (dataArray != nil)	// If not dataArray found, we don't do anything	{		matchStr = [dataArray objectAtIndex: kCmdoPrototypeMatch];		subsStr = [theSender stringValue];				NSString *subsKey = [CmdoControl makeSubstitutionKey: matchStr];		[gSubstitutionDictionary setObject: subsStr forKey: subsKey];	}		[mParent displayCommandLine];}- (void) textFieldChanged: (NSNotification *)notification{	NSDictionary *theDict = [notification userInfo];}@end