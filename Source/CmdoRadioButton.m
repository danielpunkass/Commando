/*************************************************************************************************//* Copyright 2005 Shane D. Looker.                                                               *//*                                                                                               *//* This source code is being made available as free sample code as is. No warantee, express or   *//* implied is made as to the quality or correctness of this code.                                *//* This source code may be freely distributed as long as this copyright notice remains attached. *//* Check http://www.MacCommando.com for updated source.                                          *//*************************************************************************************************/#import "CmdoRadioButton.h"@implementation CmdoRadioButton- (id) initWithArray: (NSMutableArray*) controlInfo radioDict: (NSMutableDictionary*) radioDict{	NSString*	theType = [controlInfo objectAtIndex: kCmdoControlType];	NSMatrix	*aMatrix = [radioDict objectForKey: theType];			// Now define the Radio button	NSButton* aButton = [NSButton new];	int	theTag = [self nextTag];	[aButton setTag: theTag];	[aButton setButtonType: NSRadioButton];	[aButton setTitle: [controlInfo objectAtIndex: kCmdoControlLabel]];	[aButton sizeToFit];	mRect = [aButton frame];	[aButton setToolTip: [controlInfo objectAtIndex: kCmdoControlToolTipText]];	[aButton setAction: @selector(radioHandler:)];	[aButton setTarget: self];	[controlInfo replaceObjectAtIndex: 0 withObject: aButton];	// Save off the reference to the button	if (aMatrix == nil)	// Need to create the matrix	{	//	aMatrix = [[NSMatrix alloc] initWithFrame: NSMakeRect(0.0, 0.0, 10.0, 23.0)];		aMatrix = [[NSMatrix alloc] initWithFrame: NSMakeRect(0.0, 0.0, 10.0, 23.0) mode: NSRadioModeMatrix prototype: [aButton cell] numberOfRows: 0 numberOfColumns: 1 ];		[aMatrix setAllowsEmptySelection: YES];	//	[aMatrix setAction: @selector(matrixHandler:)];	//	[aMatrix setTarget: self];	//	[aMatrix insertColumn: 0];		[radioDict setObject: aMatrix forKey: theType];	}	mControl = aMatrix; // aButton;	mRadioButton = aButton;//	int	rowCount = [aMatrix numberOfRows];	int	rowCount, colCount;	[aMatrix addRowWithCells: [NSArray arrayWithObject: [aButton cell]]];	[aMatrix sizeToFit];	[aMatrix getNumberOfRows: &rowCount columns: &colCount];		[aMatrix setToolTip: [controlInfo objectAtIndex: kCmdoControlToolTipText] 						forCell: [aMatrix cellAtRow: rowCount-1 column: colCount-1] ];	[gAllOptionControls setObject: controlInfo forKey: [NSNumber numberWithInt: [aButton tag]]];	return self;}- (float) height{	return NSHeight([mControl frame]);	}- (void) radioHandler: (id) sender{	NSButton*	theSender = sender;		NSString	*matchStr;	NSString	*subsStr;	if ([sender isKindOfClass: [NSMatrix class]])		// Got the matrix, now get the actual radio button		theSender = mRadioButton; //[[sender selectedCell] controlView];	// This should be the radio button		NSMutableArray	*dataArray = [gAllOptionControls objectForKey: [NSNumber numberWithInt:[theSender tag]]];		if (dataArray != nil)	// If not dataArray found, we don't do anything	{		matchStr = [dataArray objectAtIndex: kCmdoPrototypeMatch];		if ([theSender state] == NSOnState)		{			subsStr = [dataArray objectAtIndex: kCmdoFlagLiteralSubs];			NSString *subsKey = [CmdoControl makeSubstitutionKey: matchStr];			[gSubstitutionDictionary setObject: subsStr forKey: subsKey];			[mParent displayCommandLine];		}		// If a radio isn't going on, we don't do anything because another radio		// is coming on.	}	}- (void) matrixHandler: (id) sender{	NSMutableArray	*dataArray = [gAllOptionControls objectForKey: [NSNumber numberWithInt:[sender tag]]];}@end