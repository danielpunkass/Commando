/*************************************************************************************************//* Copyright 2005 Shane D. Looker.                                                               *//*                                                                                               *//* This source code is being made available as free sample code as is. No warantee, express or   *//* implied is made as to the quality or correctness of this code.                                *//* This source code may be freely distributed as long as this copyright notice remains attached. *//* Check http://www.MacCommando.com for updated source.                                          *//*************************************************************************************************/#import "AssociatedTable.h"@implementation AssociatedTable- (id) init{	mKeyArray = [NSMutableArray new];	mDataArray = [NSMutableArray new];	mUniqueKey = TRUE;		return [super init];}- (void) dealloc{	[mKeyArray release];	[mDataArray release];	[super dealloc];}- (int) count{	return [mKeyArray count];}- (void) setObject: (id) dataObject forKey: (id) key{	BOOL	doAdd = FALSE;	int index;	if (mUniqueKey)	{		index = [mKeyArray indexOfObject: key];		if (index == NSNotFound)	// Need to append the object		{			doAdd = TRUE;		}	}		if (doAdd)	// I don't need an index, this goes at the end	{		[mKeyArray addObject: key];		[mDataArray addObject: dataObject];	}	else 	{	// Replace the old object. This will implicitly Release the old object		[mDataArray replaceObjectAtIndex: index withObject: dataObject];	}}- (id) objectAtIndex: (int) index{	return [mDataArray objectAtIndex: index];}- (id) keyAtIndex: (int) index;{	return [mKeyArray objectAtIndex: index];}- (id) objectForKey: (id) key{	int index = [mKeyArray indexOfObject: key];	if (index != NSNotFound)		return [mDataArray objectAtIndex: index];	else		return nil;}- (NSArray*) allKeys{	return [NSArray arrayWithArray: mKeyArray];}- (NSArray*) allObjects{	return [NSArray arrayWithArray: mDataArray];}- (NSString*) description{	NSMutableString	*aString = [NSMutableString stringWithFormat:@"AssociatedTable address = %x {\n", self];		int	theCount = [self count];	for (int i = 0; i < theCount; i++)	{		[aString appendFormat: @" {key='%@', object='%@'},\n", [self keyAtIndex: i], [self objectAtIndex: i]];	}	[aString appendFormat: @"}\n"];	return aString;}@end