/*************************************************************************************************//* Copyright 2005 Shane D. Looker.                                                               *//*                                                                                               *//* This source code is being made available as free sample code as is. No warantee, express or   *//* implied is made as to the quality or correctness of this code.                                *//* This source code may be freely distributed as long as this copyright notice remains attached. *//* Check http://www.MacCommando.com for updated source.                                          *//*************************************************************************************************/#import "CmdoControl.h"#import "CmdoCheckbox.h"#import "CmdoRadioButton.h"#import "CmdoTextField.h"extern	int	gLastControlTag = 0;@implementation CmdoControl+ (id) initWithData: (NSMutableArray*) theData forController: (CommandoWindowController*) theParent;{	NSString *controlType = [theData objectAtIndex: kCmdoControlType];	CmdoControl	*returnControl = nil;		if ([controlType isEqual: @"S"])		returnControl = [[CmdoCheckbox alloc] initWithArray: theData];	else if ([controlType hasPrefix: @"R"])	{		returnControl = [[CmdoRadioButton alloc] initWithArray: theData radioDict: gRadioDict];	}	else if ([controlType hasPrefix: @"T"])	{		returnControl = [[CmdoTextField alloc] initWithArray: theData];		}		if (returnControl != nil)				// OK, this should really be in each CmdoControl instance		returnControl->mParent = theParent;	return returnControl;}- (int) nextTag;{	return ++gLastControlTag;}+ (NSString*) makeSubstitutionKey: (NSString*) aNumberStr{	NSString	*newStr = [NSString stringWithFormat: @"[%@]", aNumberStr];	return newStr;}- (NSControl*) control{	return mControl;}- (void) addTextField: NSTextFieldView{	}- (float) height{	return NSHeight(mRect);	}- (void) GetDictionaryEntry{	}- (NSString*)	textItem		// This can be an NSString or nil{	return nil;}- (id) copyWithZone: (NSZone*) zone{	CmdoControl *aCopy = (CmdoControl*) [super copyWithZone: zone];	aCopy->mControl = [mControl retain];	aCopy->mRect = mRect;	return aCopy;}@end